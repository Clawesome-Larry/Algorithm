# 2. 왕실의 나이트

input_data = input()
row = int(input_data[1])
column = int(ord(input_data[0])) - int(ord('a')) + 1   #ord() 함수: 해당 문자를 아스키코드로 변환 ex. a = 97, b = 98, c = 99, ...

count = 0
dx = [2, 2, -2, -2, -1, -1, 1, 1]
dy = [1, -1, 1, -1, 2, -2, 2, -2]  # 가능한 이동 방법
for i in range(len(dx)):
    row_next = row + dx[i]
    column_next = column + dy[i]
    if 1 <= row_next <= 8 and 1 <= column_next <=8:  # 맵 내부의 범위에 존재할 때만 count
        count+=1

print(count)



#3. 게임 개발

n ,m = map(int, input().split())

x, y, direction = map(int, input().split())

array = []
for i in range(n):
  array.append(list(map(int, input().split)))

count = 0
dx = [-1, 1, 0, 0]
dy = [0, 0, 1, -1]

for i in range(len(dx)):
  next_x = x + dx[i]
  next_y = y + dy[i]

# 이미 지나간 곳은 0 에서 1 로 변환?
# 0 밟을 때마다 count += 1



#7. 럭키 스트레이트

n = input()
num_list = list(map(int, str(n)))

sum_left = 0
sum_total = 0

for i in range(0, len(num_list) // 2):   # 왼쪽 절반 합
  sum_left = sum_left + int(num_list[i])
  i += 1

for i in range(0, len(num_list)):  # 전체 숫자 합
  sum_total = sum_total + int(num_list[i])
  i += 1

if sum_left * 2 == sum_total:  # 왼쪽 절반 합 = 오른쪽 절반 합  <->  왼쪽 절반 합 * 2 = 전체 합
  print("LUCKY")
else:
  print("READY")
  
  
  
  #8. 문자열 재정렬

data = input()
alphabet_list = []
sum = 0

for i in data:
  if i.isalpha():   # 해당 입력이 문자인지 확인하는 함수 .isalpha()
    alphabet_list.append(i)
  elif i.isdigit:  # 해당 입력이 숫자인지 확인하는 함수 .isdigit()
    sum = sum + int(i)

alphabet_list.sort()
alphabet_list.append(str(sum))   # 알파벳 정렬 후 마지막에 sum append (string 형식으로 변환 필요)

print(''.join(alphabet_list))   # 띄어쓰기 없이 모두 연결



# 백과사전
from itertools import *

def solution(word):
    answer = 0
    make_list = []
    for i in range(1,6) :
        make_list += list(map(''.join, product("AEIOU", repeat = i)))  # Product 함수 (두 개 이상의 리스트의 조합 구할 때 사용)
    make_list.sort()
    answer = make_list.index(word) + 1
    return answer

word = input()
print(solution(word))

# https://url.kr/zbxmak
