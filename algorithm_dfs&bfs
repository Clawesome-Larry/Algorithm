# 1. 특정거리의 도시 찾기

from collections import deque  # bfs 이용

n, m, k, x = map(int, input().split())   # n개의 도시, m개의 단방향 도로, x에서 출발해서 최단거리가 k인 지점 모두 찾기

graph = [[] for _ in range(n+1)]  # input이 "1 2" 이면 1에서 2로 가는 단방향 도로가 존재
                                  # 1번 도시 1번에 indexing 하기 위해 첫 칸 비워놓음

for _ in range(m):  # 도로가 m개
  a, b = map(int, input().split())
  graph[a].append(b)

distance = [-1]* (n+1)  # 최단거리 = -1 -> 아직 안가본 도시 표현, x에서 출발해서 ㅁ번째 도시까지 최단거리 순서대로 저장하는 배열
distance[x] = 0  # 현재 도시는 거리가 0

q = deque([x])  # 입력받은 x 번째 category에서 시작
while q:
  now = q.popleft()
  for next_node in graph[now]:  # graph에서 now번째 index에 들어있는 원소들 (갈수있는 주변 도시)
    if distance[next_node] == -1:
      distance[next_node] = distance[now] + 1
      q.append(next_node)

check = False
for i in range (1, n+1):
  if distance[i] == k:  # 그 도시까지의 최단거리가 원하는 값일 때 출력
    print(i)
    check = True

if check == False:
  print(-1)
  
  
# 2. 연구소

# dfs 이용

n, m = map(int, input().split())  # n * m 크기의 연구소
data = []  # 초기 맵 정보
temp = [[0]*m for _ in range(n)]  # 벽 세우고 난 뒤 맵 정보 // 빈칸은 0, 벽은 1, 바이러스는 2

for _ in range(n):
  data.append(list(map(int, input().split())))

dx = [-1, 0, 1, 0]  # 상하좌우 이동방향
dy = [0, 1, 0, -1]

result = 0

def virus(x, y):  # 바이러스 확산 함수
  for i in range(4):
    nx = x + dx[i]
    ny = y + dy[i]

    if nx >= 0 and nx < n and ny >= 0 and ny < m:  # 움직인 다음에 연구소 내부 위치이고 
      if temp[nx][ny] == 0:  # 바이러스 없는 공간이면
        temp[nx][ny] = 2  # 바이러스로 바꿈
        virus(nx, ny)  

def get_score():  # 안전영역 개수 확인 함수
  score = 0
  for i in range(n):
    for j in range(m):
      if temp[i][j] == 0:  # 각 칸 확인하면서 (i, j) 좌표 칸 값이 0 인 곳 개수 세기
        score += 1
  return score

def dfs(count):  # 안전영역 최댓값 출력 함수
  global result
  if count == 3:  # 벽 3개 세웠으면
    for i in range(n):
      for j in range(m):
        temp[i][j] = data[i][j]  # 맵을 벽 세우고 난 뒤 맵으로 변환
    for i in range(n):
      for j in range(m):
        if temp[i][j] == 2:  # 바이러스 있는 칸은 확산 함수 시행
          virus(i, j)
    result = max(result, get_score())  # 최댓값 비교하며 저장
    return

  for i in range(n):
    for j in range(m):
      if data[i][j] == 0:  # 빈칸이면
        data[i][j] = 1  # 벽을 세운다
        count += 1   # 벽 개수 += 1
        dfs(count)   # 안전영역 최댓값 계산
        data[i][j] = 0  # 원상복구
        count -= 1   # 벽 개수도 초기화

dfs(0)
print(result)


# 3. 경쟁적 전염

from collections import deque

n, k = map(int, input().split())

graph = []   # 맵 전체 정보
data = []   # 바이러스 위치 정보

for i in range(n):   # 바이러스 찾는 과정
  graph.append(list(map(int, input().split())))
  for j in range(n):
    if graph[i][j] != 0:  # 맵의 위치에 바이러스가 존재하면
      data.append((graph[i][j], 0, i, j))  # 바이러스 위치 정보 배열에 해당 정보 추가

data.sort()  # 작은 순서대로 시행
q = deque(data)

target_s, target_x, target_y = map(int, input().split())

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

while q:
  virus, s, x, y = q.popleft()
  if s == target_s:  # s초 후 break
    break

for i in range(4):
  nx = x + dx[i]
  ny = y + dy[i]

  if nx >= 0 and nx < n and ny >= 0 and ny < n:  # 맵 안에서
    if graph[nx][ny] == 0:
      graph[nx][ny] = virus  # 주변이 빈칸이면 바이러스 확산
      q.append((virus, s+1, nx, ny))

print(graph[target_x -1][target_y -1])


# 4. 괄호 변환

# 매커니즘 이해 불가...


# 추가문제1. DFS와 BFS

from collections import deque

n, m, v = map(int, input().split())
graph = [[] for _ in range(n+1)]

for _ in range(m):
  j, k = map(int, input().split())  # j와 k 간 이동 가능
  graph[j].append(k)   # j에서 k로 갈 수 있다
  graph[k].append(j)   # k에서 j로도 갈 수 있다
  graph[j].sort()      # 번호 낮은 순으로 정렬

def dfs(graph, s, visited_dfs):  # dfs 알고리즘
  visited_dfs[s] = True
  print(s, end = ' ')
  for i in graph[s]:
    if not visited_dfs[i]:
      dfs(graph, i , visited_dfs)

visited_dfs = [False] * (n + 1)

def bfs(graph, start, visited_bfs): # bfs 알고리즘
  q = deque([start])
  visited_bfs[start] = True
  while q:
    k = q.popleft()
    print(k, end = ' ')

    for i in graph[k]:
      if not visited_bfs[i]:
        q.append(i)
        visited_bfs[i] = True

visited_bfs = [False] * (n + 1)

dfs(graph, v, visited_dfs)  # 한줄씩 출력
print()
bfs(graph, v, visited_bfs)

